#
# This PKGBUILD requires root at the package stage. Building works as user, afterwards
# use makepkg -R --asroot
#
pkgname=('freebsd-world' 'freebsd-kernel' 'freebsd-source' 'freebsd-init')
if [[ "$CARCH" == "x86_64" ]]; then
  pkgname=(${pkgname[@]} 'freebsd-lib32')
fi

_freebsdver=10.0
_libarchivever=3.1.2

_git_commit_rev="a03c4d386933"
#_git_branch="stable/10"
_git_desc="(from git: ${_git_commit_rev})"

epoch=1
pkgver=10.0.20140606
pkgrel=1

arch=('i686' 'x86_64')
url="https://www.freebsd.org"
license=('BSD')
options=('!strip' 'emptydirs' '!fbsd10fix')

_patches=('libarchive-mtree-fix'
          'patch-dirty-geom-FUIKWID.diff'
          'sys-include-fixes.diff')

## The commit should currently come from the stable/10 branch
source=("git+git://github.com/freebsd/freebsd.git#commit=${_git_commit_rev}"
        'ARCHBSD_i686'
        'ARCHBSD_i686.patch'
        'ARCHBSD_x86_64'
        'ARCHBSD_x86_64.patch'
        'libcrypto.pc.in'
        'libarchive.pc'
        'openssl.pc.in'
        'linux-version.patch'
        "${_patches[@]}")
sha1sums=('SKIP'
          'b810b80ad682584f90d6d3c5bb2ff2c0e6193bc7'
          '3204b327471533d545292b67a602d19f7baf45b4'
          '8b0e9cbfbc77985fa0a9f87d36e97066e120c097'
          'e6f8286db3636b2b50ed8703d37c7142208b7e3b'
          '8b1142f057ef8ba1404bc441ac2d7a0dc875af3a'
          'b394ece3b916003fa849601484cea2f724301baa'
          '79c202df6e247ba09ce5196eabd879feac4ec121'
          'ee29b9de716f140d5e47352306ce964db57baaaf'
          'f79da8d1abedab50b4d96b66ca659ca295f8a1c4'
          '0a2361bf78036bf11b140c364d45a43296b470fc'
          '753ccaa5af0527ec6c1155e663a5cfb4c4c32b4c')

pkgver() {
  echo "${_freebsdver}.$(date '+%Y%m%d')"
}

prepare() {
  cd "${srcdir}/freebsd"

  sed -i '' -e 's|db.h|fdb.h|g' "${srcdir}/freebsd/sys/dev/aic7xxx/aicasm/aicasm_symbol.c"

  if [[ "$CARCH" == "x86_64" ]]; then
    patch "${srcdir}/freebsd/sys/amd64/amd64/identcpu.c"  "$srcdir/ARCHBSD_x86_64.patch"
  else
    patch "${srcdir}/freebsd/sys/i386/i386/identcpu.c" "$srcdir/ARCHBSD_i686.patch"
  fi

  for i in "${_patches[@]}"; do
    patch -p1 -i "${srcdir}/$i"
  done

    patch -p0 -i "${srcdir}/linux-version.patch"

  #Remove the horrible dir string in uname
  sed -i '' -e 's/:\${d}//g' "${srcdir}/freebsd/sys/conf/newvers.sh"

  #Remove debug options from generic
  sed -i '' -e '/DEBUG=/d' "${srcdir}/freebsd/sys/amd64/conf/GENERIC"

  cd "${srcdir}"
  msg "Fetching version info for .pc files"
  local openssl_version=$(grep -m1 '^VERSION=' freebsd/crypto/openssl/Makefile \
                          | sed -e 's/^VERSION=[[:space:]]*//')
  msg "openssl: ${openssl_version}"
  sed -e "s|%%VERSION%%|${openssl_version}|g" openssl.pc.in > openssl.pc

  # libcrypto and openssl share their version
  msg "libcrypto: ${openssl_version}"
  sed -e "s|%%VERSION%%|${openssl_version}|g" libcrypto.pc.in > libcrypto.pc

  # libarchive only has it in a #define, I wonder if it'll stay that way
  # in the sources
}

flags_for_all() {
  cd "$srcdir"

  export MAKEOBJDIRPREFIX="$srcdir/obj"
  unset LDFLAGS CXXFLAGS CPPFLAGS CFLAGS M4 LD RANLIB ld
  if [[ "$CARCH" == "x86_64" ]]; then
    export TARGET=amd64
    export KERNCONF=ARCHBSD_x86_64
  else
    export TARGET=i386
    export KERNCONF=ARCHBSD_i686
  fi

  # Build with clang -- Is this required? It builds its own compiler after all.
  export CC=clang
  export CPP=clang-cpp
  export CXX=clang++

  # export CFLAGS+="-march=${CARCH//_/-} -mtune=generic -O2"
  ARCH=$(uname -m | tr _ -)
  export CFLAGS="-march=$ARCH -mtune=generic -O2"
  [[ $ARCH == "x86-64" && $CARCH == "i686" ]] && CFLAGS+=" -m32"

  export PATH=/usr/local/bin:$PATH

  # building the default parameters here:
  bsdmakeflags=(
    KERNCONF="${KERNCONF}"
    -DWITHOUT_GCC
    NO_FSCHG=1
  )
}

_build() {

  cd "${srcdir}/freebsd"
  msg "Linking kernel config"
  ln -sf "${srcdir}/$KERNCONF" "${srcdir}/freebsd/sys/${TARGET}/conf/$KERNCONF"

  msg "Building Kernel toolchain"
  make WERROR= NO_WERROR= "${bsdmakeflags[@]}" kernel-toolchain || (echo kernel-toolchain failed... && return 1)

  msg "Building Kernel"
  make WERROR= NO_WERROR= "${bsdmakeflags[@]}" buildkernel || (echo buildkernel failed... && return 1)

  msg "Building world"
  make WERROR= NO_WERROR= "${bsdmakeflags[@]}" buildworld || (echo buildworld failed... && return 1)

}

_package_freebsd-kernel() {
  pkgdesc="FreeBSD kernel package ${_git_desc}"
  groups=('base')
  options=('!strip')

  cd "${srcdir}/freebsd"

  make -j1 "${bsdmakeflags[@]}" DESTDIR="${pkgdir}" installkernel || (echo installkernel failed... && return 1)
}

_package_freebsd-kernel-newcons() {
  pkgdesc="FreeBSD kernel package ${_git_desc}"
  options=('!strip')
  provides=('freebsd-kernel')
  conflicts=('freebsd-kernel')

  export KERNCONF=ARCHBSD_x86_64-newcons	

  cd "${srcdir}/freebsd"
  msg "Building Kernel"
  make WERROR= NO_WERROR= "${bsdmakeflags[@]}" buildkernel || (echo buildkernel failed... && return 1)

  make -j1 "${bsdmakeflags[@]}" DESTDIR="${pkgdir}" installkernel || (echo installkernel failed... && return 1)

}

_package_freebsd-world() {
  pkgdesc="FreeBSD base package ${_git_desc}"
  groups=('base')
  depends=('init' 'freebsd-kernel')
  conflicts=(libexecinfo binutils libiconv libarchive)
  provides=(libc=${_freebsdver} zlib=${_freebsdver} libexecinfo openssl binutils=2.23 libiconv libarchive=${_libarchivever})

  cd "${srcdir}/freebsd"

  msg "Running make installworld distribution..."
  make -j1 "${bsdmakeflags[@]}" DESTDIR="$pkgdir" -DWITHOUT_LIB32 installworld distribution

  msg "Installed. Cleaning up and configuring..."

  #Create the links in the source for i686 and x86_64
  if [ ! -d "${srcdir}/freebsd/sys/x86_64" ]; then
    ln -s amd64 "${srcdir}/freebsd/sys/x86_64"
  fi

  if [ ! -d "${srcdir}/freebsd/sys/i686" ]; then
    ln -s i386 "${srcdir}/freebsd/sys/i686"
  fi

  #solve some conflicts
  rm -r "${pkgdir}/usr/share/man/man3/pthread.3.gz"
  mv "${pkgdir}/usr/include/db.h" "${pkgdir}/usr/include/fdb.h"

  #remove rc tools for openrc
  rm -r ${pkgdir}/etc/rc.d*

  rm ${pkgdir}/etc/{rc,rc.shutdown} \
     ${pkgdir}/usr/share/man/man8/rc.8.gz

  msg "Removing files provided by other packages"
  rm "${pkgdir}"/usr/bin/{lp,lpq,lpr,lprm} \
     "${pkgdir}"/usr/sbin/lpc \
     "${pkgdir}"/usr/share/man/man1/lp.1.gz \
     "${pkgdir}"/usr/share/man/man1/lp{q,r,rm}.1.gz \
     "${pkgdir}"/usr/share/man/man8/lpc.8.gz

  #Remove flex files
  rm "${pkgdir}"/usr/share/man/man1/flex.1.gz

  #Remove files provided by gcc-libs
  rm "${pkgdir}"/usr/lib/{libgcc_s.so,libgomp.so,libgomp.so.1,libgomp.a}
  # Grrrr
  rm "${pkgdir}"/lib/libgcc_s.so.1

  #remove rc.conf in defaults provided by FreeBSD-Configs
  rm "${pkgdir}"/etc/defaults/rc.conf \
     "${pkgdir}"/etc/rc.subr

  #Remove unzip provided by world
  rm "${pkgdir}"/usr/bin/unzip

  #Remove freebsd-update
  rm "${pkgdir}"/usr/sbin/freebsd-update \
     "${pkgdir}"/usr/share/man/man1/cpp.1.gz

  #Remove files now provided by FreeBSD-config
  rm "${pkgdir}"/etc/freebsd-update.conf \
     "${pkgdir}"/etc/netstart \
     "${pkgdir}"/etc/devd/asus.conf \
     "${pkgdir}"/boot/beastie.4th \
     "${pkgdir}"/boot/brand.4th \
     "${pkgdir}"/etc/csh.cshrc \
     "${pkgdir}"/etc/devd.conf \
     "${pkgdir}"/etc/devfs.conf \
     "${pkgdir}"/etc/motd \
     "${pkgdir}"/etc/profile \
     "${pkgdir}"/etc/sysctl.conf \
     "${pkgdir}"/etc/devd/uath.conf \
     "${pkgdir}"/etc/devd/usb.conf

  #Fix iconv path in ndisgen
  sed -i '' -e 's|/usr/local/bin/iconv|/usr/bin/iconv|g' "${pkgdir}"/usr/sbin/ndisgen

  #set var/cache to 755
  chmod -Rv 755 "${pkgdir}"/var/cache
  # FIXME: /var/db/entropy seems to have changed from 700 to 755
  # if keeping it 700 doesn't break anything, fix it up to 700 again!
  chmod -Rv 700 "${pkgdir}"/var/db/entropy

  # fix lib32 dir breakage
  if [[ "$CARCH" == "x86_64" ]]; then
    rm -r "${pkgdir}/usr/lib32/"
  fi

  cd "$pkgdir"

  backup=('boot/device.hints')
  for f in `find -E etc -type f ! -regex ".*periodic.*|.*mtree.*|.*defaults.*|.*README|.*Makefile"` `find root var -type f`; do
    backup+=("${f}")
  done

  if [[ "$CARCH" == "x86_64" ]]; then
    msg "Fixing up 32/64 bit include files"
    # Move machine headers to a 64/ directory and create wrappers
    mv "$pkgdir"/usr/include/machine "$srcdir"/machine64
    install -dm755 "$pkgdir"/usr/include/machine
    mv "$srcdir"/machine64 "$pkgdir"/usr/include/machine/64
    # Install 32 bit machine headers to /usr/include/machine/32
    cp -R "$srcdir"/freebsd/sys/i386/include "$pkgdir"/usr/include/machine/32
    cd "$pkgdir"/usr/include/machine
    install -dm755 pc
    for i in 64/pc/*; do
      b=${i#64/pc/}
      cat > "pc/$b" <<EOF
#if __x86_64
#  include <machine/64/pc/$b>
#else
#  include <machine/32/pc/$b>
#endif
EOF
    done

    for i in 64/*; do
      b=${i#64/}
      if [ "$b" = "pc" ]; then continue; fi
      if [ -e "32/$b" ]; then
        cat > "$b" <<EOF
#if __x86_64
#  include <machine/64/$b>
#else
#  include <machine/32/$b>
#endif
EOF
      else
        cat > "$b" <<EOF
#if __x86_64
#  include <machine/64/$b>
#else
#  error "No such 32-bit include: <machine/32/$b>"
#endif
EOF
      fi
    done
    for i in 32/*; do
      if [ "$b" = "pc" ]; then continue; fi
      b=${i#32/}
      if [ ! -e "$b" ]; then
        cat > "$b" <<EOF
#if __x86_64
#  error "No such 64-bit include: <machine/64/$b>"
#else
#  include <machine/32/$b>
#endif
EOF
      fi
    done
  fi
  install -dm755 "${pkgdir}/usr/libdata/ldconfig"
  echo "/lib" > "${pkgdir}/usr/libdata/ldconfig/lib"

  #Install libcrypto pc file
  mv "${pkgdir}/usr/libdata/pkgconfig" "${pkgdir}/usr/lib"
  install -m655  "${srcdir}/libcrypto.pc"  "${pkgdir}/usr/lib/pkgconfig/"
  install -m655  "${srcdir}/libarchive.pc" "${pkgdir}/usr/lib/pkgconfig/"
  install -m655  "${srcdir}/openssl.pc"    "${pkgdir}/usr/lib/pkgconfig/"
  #Setup console log
  msg "Setting up console.log"
  touch console.log
  install -m600 console.log ${pkgdir}/var/log/


  #Prevent some log warnings

  install -dm755 ${pkgdir}/var/at/jobs/
  install -dm755 ${pkgdir}/var/db/entropy
}

_package_freebsd-source() {
  pkgdesc="FreeBSD source matching FreeBSD kernel ${_git_desc}"
  options=('!strip')
  arch=('any')
  cd "${srcdir}/freebsd"
  mkdir -p "${pkgdir}/usr/src"
  cp -a "${srcdir}/freebsd"/* "${pkgdir}/usr/src/"
  # The only place where -f is okay - the above doesn't usually include 
  # dot-files, but w/e...
  rm -rf "${pkgdir}"/usr/src/.git
}

if [[ "$CARCH" == "x86_64" ]]; then
_package_freebsd-lib32() {
  pkgdesc="FreeBSD lib32 libraries ${_git_desc}"
  provides=("lib32-libc=${_freebsdver}")
  options=('!strip')
  arch=('x86_64')
  install=lib32.install
  conflicts=(lib32-libexecinfo lib32-libiconv lib32-libarchive)
  provides=(lib32-libc=${_freebsdver} lib32-zlib=${_freebsdver} lib32-libexecinfo lib32-openssl lib32-libiconv lib32-libarchive=${_libarchivever})

  cd "${srcdir}/freebsd"
  install -dm755 "${pkgdir}"/usr/{lib32,libdata,libexec,bin}
  install -dm755 "${pkgdir}"/usr/lib32/{i18n,private}
  install -dm755 "${pkgdir}"/libexec/
  install -dm755 "${pkgdir}"/usr/libdata/pkgconfig
  make -j1 "${bsdmakeflags[@]}" DESTDIR="$pkgdir" install32

  rm -r "${pkgdir}/usr/libdata"

  # newer ones will be provided by lib32-gcc-libs
  rm "${pkgdir}"/usr/lib32/lib{gcc_s.so{,.1},gomp.{a,so{,.1}}}
}
fi

_package_freebsd-init() {
  pkgdesc="FreeBSD init scripts ${_git_desc}"
  provides=('init')
  conflicts=('openrc')
  options=('!strip')
  arch=('x86_64')
  backup=("etc/rc.conf")

  cd "${srcdir}/freebsd"
  #remove rc tools for openrc
  install -dm755 ${pkgdir}/etc/
  cp -Ra "${srcdir}/freebsd/etc"/rc* ${pkgdir}/etc/ 

  #Files kept in world as needed by openrc also
  rm "${pkgdir}"/etc/rc.{bsdextended,firewall,initdiskless,resume,sendmail,suspend}

}

build() {
  flags_for_all
  _build
}
for _p in ${pkgname[@]}; do
  eval "package_${_p}() {
    flags_for_all
    _package_${_p}
  }"
done
