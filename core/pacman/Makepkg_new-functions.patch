--- scripts/makepkg.sh.in.orig	2014-12-19 03:48:00.000000000 +0000
+++ scripts/makepkg.sh.in	2015-01-03 17:21:39.233164687 +0000
@@ -45,12 +45,13 @@
 declare -r confdir='@sysconfdir@'
 declare -r BUILDSCRIPT='@BUILDSCRIPT@'
 declare -r startdir="$PWD"
+declare -r absddir='/usr/share/absd'
 
 LIBRARY=${LIBRARY:-'@libmakepkgdir@'}
 
 packaging_options=('strip' 'docs' 'libtool' 'staticlibs' 'emptydirs' 'zipman'
                    'purge' 'upx' 'debug')
-other_options=('ccache' 'distcc' 'buildflags' 'makeflags')
+other_options=('ccache' 'distcc' 'buildflags' 'makeflags' 'fbsd10fix' 'libtoolfix' 'clang')
 splitpkg_overrides=('pkgdesc' 'arch' 'url' 'license' 'groups' 'depends'
                     'optdepends' 'provides' 'conflicts' 'replaces' 'backup'
                     'options' 'install' 'changelog')
@@ -1531,8 +1525,7 @@
 	rm -f "$statusfile"
 
 	if (( errors )); then
-		error "$(gettext "One or more PGP signatures could not be verified!")"
-		exit 1
+		warning "$(gettext "One or more PGP signatures could not be verified!")"
 	fi
 
 	if (( warnings )); then
@@ -2015,6 +2016,11 @@
 		fi
 	done
 
+	if [[ -d "${startdir}/files" && ! -d "${srclinks}/${pkgbase}/files" ]]; then
+		msg2 "$(gettext "Adding %s directory ...")" "files"
+		ln -s "${startdir}/files" "${srclinks}/${pkgbase}/"
+	fi
+
 	local i
 	for i in 'changelog' 'install'; do
 		local file
@@ -2635,6 +2641,17 @@
 # default config is makepkg.conf
 MAKEPKG_CONF=${MAKEPKG_CONF:-$confdir/makepkg.conf}
 
+# source our external functions
+ABSD_FUNCTIONS=${ABSD_FUNCTIONS:-$absddir/absd-functions}
+
+if [[ -r $ABSD_FUNCTIONS ]]; then
+	source_safe "$ABSD_FUNCTIONS"
+else
+	error "$(gettext "%s not found.")" "$ABSD_FUNCTIONS"
+	plain "$(gettext "Aborting...")"
+	exit 1 # $E_CONFIG_ERROR
+fi
+
 # Source the config file; fail if it is not found
 if [[ -r $MAKEPKG_CONF ]]; then
 	source_safe "$MAKEPKG_CONF"
@@ -3666,6 +3683,27 @@
 		basever=$(get_full_version)
 		check_build_status
 	fi
+
+	# Set our compiler
+	if check_option "clang" "y"; then
+		run_function_safe set_compiler_clang
+	else
+		run_function_safe set_compiler_gcc
+	fi
+
+	# Use the FreeBSD 10 Fix
+	if check_option "fbsd10fix" "y"; then
+		run_function_safe "fbsd10fix"
+	fi
+
+	# Use the FreeBSD libtool
+	if check_option "libtoolfix" "y"; then
+		run_function_safe "libtoolfix"
+	fi
+
+	# Use the apply_patches
+	run_function_safe "apply_patches"
+
 	if (( PREPAREFUNC )); then
 		run_prepare
 	fi
