--- scripts/makepkg.sh.in.orig	2015-02-14 01:30:05.000000000 +0000
+++ scripts/makepkg.sh.in	2015-08-28 13:24:33.860574068 +0100
@@ -45,12 +45,13 @@
 declare -r confdir='@sysconfdir@'
 declare -r BUILDSCRIPT='@BUILDSCRIPT@'
 declare -r startdir="$PWD"
+declare -r absddir='/usr/share/absd'
 
 LIBRARY=${LIBRARY:-'@libmakepkgdir@'}
 
 packaging_options=('strip' 'docs' 'libtool' 'staticlibs' 'emptydirs' 'zipman'
                    'purge' 'upx' 'debug')
-other_options=('ccache' 'distcc' 'buildflags' 'makeflags')
+other_options=('ccache' 'distcc' 'buildflags' 'makeflags' 'fbsd10fix' 'libtoolfix' 'clang' 'pathfix' 'iconv')
 splitpkg_overrides=('pkgdesc' 'arch' 'url' 'license' 'groups' 'depends'
                     'optdepends' 'provides' 'conflicts' 'replaces' 'backup'
                     'options' 'install' 'changelog')
@@ -444,7 +445,7 @@
 
 	if (( EUID == 0 )); then
 		# change perms of all source files to root user & root group
-		chown -R 0:0 "$srcdir"
+		chown -R root:wheel "$srcdir"
 	fi
 }
 
@@ -759,7 +760,7 @@
 
 	msg2 "$(gettext "Creating working copy of %s %s repo...")" "${repo}" "svn"
 
-	cp -au "$dir" "$srcdir"
+	cp -a "$dir" "$srcdir"
 }
 
 get_all_sources() {
@@ -1507,8 +1508,7 @@
 	rm -f "$statusfile"
 
 	if (( errors )); then
-		error "$(gettext "One or more PGP signatures could not be verified!")"
-		exit 1
+		warning "$(gettext "One or more PGP signatures could not be verified!")"
 	fi
 
 	if (( warnings )); then
@@ -1724,7 +1724,7 @@
 }
 
 build_id() {
-	LANG=C readelf -n $1 | sed -n '/Build ID/ { s/.*: //p; q; }'
+	LANG=C readelf -n $1 | gsed -n '/Build ID/ { s/.*: //p; q; }'
 }
 
 strip_file() {
@@ -1923,11 +1923,11 @@
 
 	while read -r filename; do
 		# get architecture of the file; if soarch is empty it's not an ELF binary
-		soarch=$(LC_ALL=C readelf -h "$filename" 2>/dev/null | sed -n 's/.*Class.*ELF\(32\|64\)/\1/p')
+		soarch=$(LC_ALL=C readelf -h "$filename" 2>/dev/null | gsed -n 's/.*Class.*ELF\(32\|64\)/\1/p')
 		[[ -n "$soarch" ]] || continue
 
 		# process all libraries needed by the binary
-		for sofile in $(LC_ALL=C readelf -d "$filename" 2>/dev/null | sed -nr 's/.*Shared library: \[(.*)\].*/\1/p')
+		for sofile in $(LC_ALL=C readelf -d "$filename" 2>/dev/null | gsed -nr 's/.*Shared library: \[(.*)\].*/\1/p')
 		do
 			# extract the library name: libfoo.so
 			soname="${sofile%.so?(+(.+([0-9])))}".so
@@ -1980,7 +1980,7 @@
 						# check if we really have a shared object
 						if LC_ALL=C readelf -h "$fn" 2>/dev/null | grep -q '.*Type:.*DYN (Shared object file).*'; then
 							# get the string binaries link to (e.g. libfoo.so.1.2 -> libfoo.so.1)
-							local sofile=$(LC_ALL=C readelf -d "$fn" 2>/dev/null | sed -n 's/.*Library soname: \[\(.*\)\].*/\1/p')
+							local sofile=$(LC_ALL=C readelf -d "$fn" 2>/dev/null | gsed -n 's/.*Library soname: \[\(.*\)\].*/\1/p')
 							if [[ -z "$sofile" ]]; then
 								warning "$(gettext "Library listed in %s is not versioned: %s")" "'provides'" "$p"
 								libprovides+=("$p")
@@ -1988,7 +1988,7 @@
 							fi
 
 							# get the library architecture (32 or 64 bit)
-							local soarch=$(LC_ALL=C readelf -h "$fn" | sed -n 's/.*Class.*ELF\(32\|64\)/\1/p')
+							local soarch=$(LC_ALL=C readelf -h "$fn" | gsed -n 's/.*Class.*ELF\(32\|64\)/\1/p')
 
 							# extract the library major version
 							local soversion="${sofile##*\.so\.}"
@@ -2343,6 +2343,11 @@
 		fi
 	done
 
+	if [[ -d "${startdir}/files" && ! -d "${srclinks}/${pkgbase}/files" ]]; then
+		msg2 "$(gettext "Adding %s directory ...")" "files"
+		ln -s "${startdir}/files" "${srclinks}/${pkgbase}/"
+	fi
+
 	local i
 	for i in 'changelog' 'install'; do
 		local file files
@@ -3312,6 +3317,17 @@
 # default config is makepkg.conf
 MAKEPKG_CONF=${MAKEPKG_CONF:-$confdir/makepkg.conf}
 
+# source our external functions
+ABSD_FUNCTIONS=${ABSD_FUNCTIONS:-$absddir/absd-functions}
+
+if [[ -r $ABSD_FUNCTIONS ]]; then
+	source_safe "$ABSD_FUNCTIONS"
+else
+	error "$(gettext "%s not found.")" "$ABSD_FUNCTIONS"
+	plain "$(gettext "Aborting...")"
+	exit 1 # $E_CONFIG_ERROR
+fi
+
 # Source the config file; fail if it is not found
 if [[ -r $MAKEPKG_CONF ]]; then
 	source_safe "$MAKEPKG_CONF"
@@ -3427,14 +3443,12 @@
 
 if (( ! INFAKEROOT )); then
 	if (( EUID == 0 )); then
-		error "$(gettext "Running %s as root is not allowed as it can cause permanent,\n\
+		warning "$(gettext "Running %s as root is not allowed as it can cause permanent,\n\
 catastrophic damage to your system.")" "makepkg"
-		exit 1 # $E_USER_ABORT
 	fi
 else
 	if [[ -z $FAKEROOTKEY ]]; then
-		error "$(gettext "Do not use the %s option. This option is only for use by %s.")" "'-F'" "makepkg"
-		exit 1 # TODO: error code
+		warning "$(gettext "Do not use the %s option. This option is only for use by %s.")" "'-F'" "makepkg"
 	fi
 fi
 
@@ -3659,6 +3673,37 @@
 		basever=$(get_full_version)
 		check_build_status
 	fi
+
+	# Set our compiler
+	if check_option "clang" "y"; then
+		run_function_safe set_compiler_clang
+	else
+		run_function_safe set_compiler_gcc
+	fi
+
+	# Use the FreeBSD 10 Fix
+	if check_option "fbsd10fix" "y"; then
+		run_function_safe "fbsd10fix"
+	fi
+
+	# Use the FreeBSD libtool
+	if check_option "libtoolfix" "y"; then
+		run_function_safe "libtoolfix"
+	fi
+
+	#use freebsd pathfix
+        if check_option "pathfix" "y"; then
+                run_function_safe "pathfix"
+        fi
+
+        #use iconv
+        if check_option "iconv" "y"; then
+                run_function_safe "iconv"
+        fi
+
+	# Use the apply_patches
+	run_function_safe "apply_patches"
+
 	if (( PREPAREFUNC )); then
 		run_prepare
 	fi
@@ -3674,7 +3719,7 @@
 		rm -rf "$pkgdirbase"
 	fi
 	mkdir -p "$pkgdirbase"
-	chmod a-srwx "$pkgdirbase"
+	chmod a-sx "$pkgdirbase"
 	cd_safe "$startdir"
 
 	if (( ! REPKG )); then
