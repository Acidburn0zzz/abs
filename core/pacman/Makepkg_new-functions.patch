--- scripts/makepkg.sh.in.orig	2016-02-23 02:52:34.000000000 +0000
+++ scripts/makepkg.sh.in	2016-03-30 13:01:42.486803194 +0000
@@ -45,10 +45,11 @@
 declare -r confdir='@sysconfdir@'
 declare -r BUILDSCRIPT='@BUILDSCRIPT@'
 declare -r startdir="$PWD"
+declare -r pacbsddir='/usr/share/pacbsd'
 
 LIBRARY=${LIBRARY:-'@libmakepkgdir@'}
 
-build_options=('ccache' 'distcc' 'buildflags' 'makeflags')
+build_options=('ccache' 'distcc' 'buildflags' 'makeflags' 'fbsd10fix' 'libtoolfix' 'clang' 'pathfix' 'pathfix32' 'iconv' 'dos2unix')
 splitpkg_overrides=('pkgdesc' 'arch' 'url' 'license' 'groups' 'depends'
                     'optdepends' 'provides' 'conflicts' 'replaces' 'backup'
                     'options' 'install' 'changelog')
@@ -700,8 +701,7 @@
 	rm -f "$statusfile"
 
 	if (( errors )); then
-		error "$(gettext "One or more PGP signatures could not be verified!")"
-		exit 1
+		warning "$(gettext "One or more PGP signatures could not be verified!")"
 	fi
 
 	if (( warnings )); then
@@ -905,11 +905,11 @@
 
 	while read -r filename; do
 		# get architecture of the file; if soarch is empty it's not an ELF binary
-		soarch=$(LC_ALL=C readelf -h "$filename" 2>/dev/null | sed -n 's/.*Class.*ELF\(32\|64\)/\1/p')
+		soarch=$(LC_ALL=C readelf -h "$filename" 2>/dev/null | gsed -n 's/.*Class.*ELF\(32\|64\)/\1/p')
 		[[ -n "$soarch" ]] || continue
 
 		# process all libraries needed by the binary
-		for sofile in $(LC_ALL=C readelf -d "$filename" 2>/dev/null | sed -nr 's/.*Shared library: \[(.*)\].*/\1/p')
+		for sofile in $(LC_ALL=C readelf -d "$filename" 2>/dev/null | gsed -nr 's/.*Shared library: \[(.*)\].*/\1/p')
 		do
 			# extract the library name: libfoo.so
 			soname="${sofile%.so?(+(.+([0-9])))}".so
@@ -962,7 +962,7 @@
 						# check if we really have a shared object
 						if LC_ALL=C readelf -h "$fn" 2>/dev/null | grep -q '.*Type:.*DYN (Shared object file).*'; then
 							# get the string binaries link to (e.g. libfoo.so.1.2 -> libfoo.so.1)
-							local sofile=$(LC_ALL=C readelf -d "$fn" 2>/dev/null | sed -n 's/.*Library soname: \[\(.*\)\].*/\1/p')
+							local sofile=$(LC_ALL=C readelf -d "$fn" 2>/dev/null | gsed -n 's/.*Library soname: \[\(.*\)\].*/\1/p')
 							if [[ -z "$sofile" ]]; then
 								warning "$(gettext "Library listed in %s is not versioned: %s")" "'provides'" "$p"
 								libprovides+=("$p")
@@ -970,7 +970,7 @@
 							fi
 
 							# get the library architecture (32 or 64 bit)
-							local soarch=$(LC_ALL=C readelf -h "$fn" | sed -n 's/.*Class.*ELF\(32\|64\)/\1/p')
+							local soarch=$(LC_ALL=C readelf -h "$fn" | gsed -n 's/.*Class.*ELF\(32\|64\)/\1/p')
 
 							# extract the library major version
 							local soversion="${sofile##*\.so\.}"
@@ -1169,7 +1169,7 @@
 	printf "buildenv = %s\n" "${BUILDENV[@]}"
 	printf "options = %s\n" "${OPTIONS[@]}"
 
-	local pkglist=($(run_pacman -Q | sed "s# #-#"))
+	local pkglist=($(run_pacman -Q |gsed "s# #-#"))
 	printf "installed = %s\n" "${pkglist[@]}"
 }
 
@@ -1337,6 +1337,11 @@
 		fi
 	done
 
+	if [[ -d "${startdir}/files" && ! -d "${srclinks}/${pkgbase}/files" ]]; then
+		msg2 "$(gettext "Adding %s directory ...")" "files"
+		ln -s "${startdir}/files" "${srclinks}/${pkgbase}/"
+	fi
+
 	local i
 	for i in 'changelog' 'install'; do
 		local file files
@@ -1876,6 +1881,17 @@
 # default config is makepkg.conf
 MAKEPKG_CONF=${MAKEPKG_CONF:-$confdir/makepkg.conf}
 
+# source our external functions
+PACBSD_FUNCTIONS=${PACBSD_FUNCTIONS:-$pacbsddir/pacbsd-functions}
+
+if [[ -r $PACBSD_FUNCTIONS ]]; then
+	source_safe "$PACBSD_FUNCTIONS"
+else
+	error "$(gettext "%s not found.")" "$PACBSD_FUNCTIONS"
+	plain "$(gettext "Aborting...")"
+	exit 1 # $E_CONFIG_ERROR
+fi
+
 # Source the config file; fail if it is not found
 if [[ -r $MAKEPKG_CONF ]]; then
 	source_safe "$MAKEPKG_CONF"
@@ -1977,14 +1993,12 @@
 
 if (( ! INFAKEROOT )); then
 	if (( EUID == 0 )); then
-		error "$(gettext "Running %s as root is not allowed as it can cause permanent,\n\
+		warning "$(gettext "Running %s as root is not allowed as it can cause permanent,\n\
 catastrophic damage to your system.")" "makepkg"
-		exit 1 # $E_USER_ABORT
 	fi
 else
 	if [[ -z $FAKEROOTKEY ]]; then
-		error "$(gettext "Do not use the %s option. This option is only for use by %s.")" "'-F'" "makepkg"
-		exit 1 # TODO: error code
+		warning "$(gettext "Do not use the %s option. This option is only for use by %s.")" "'-F'" "makepkg"
 	fi
 fi
 
@@ -2214,6 +2228,46 @@
 		fi
 
 		extract_sources
+
+		# Set our compiler
+		if check_option "clang" "y"; then
+			run_function_safe set_compiler_clang
+		else
+			run_function_safe set_compiler_gcc
+		fi
+
+		# Use the FreeBSD 10 Fix
+		if check_option "fbsd10fix" "y"; then
+			run_function_safe "fbsd10fix"
+		fi
+
+        	if check_option "dos2unix" "y"; then
+                	run_function_safe "dos2unix"
+	        fi
+
+		# Use the FreeBSD libtool
+		if check_option "libtoolfix" "y"; then
+			run_function_safe "libtoolfix"
+		fi
+
+		#use freebsd pathfix
+	        if check_option "pathfix" "y"; then
+        	        run_function_safe "pathfix"
+	        fi
+
+        	#use freebsd pathfix
+	        if check_option "pathfix32" "y"; then
+        	        run_function_safe "pathfix32"
+	        fi
+
+        	#use iconv
+	        if check_option "iconv" "y"; then
+        	        run_function_safe "iconv"
+	        fi
+
+		# Use the apply_patches
+		run_function_safe "apply_patches"
+
 		if (( PREPAREFUNC )); then
 			run_prepare
 		fi
@@ -2236,7 +2290,7 @@
 		rm -rf "$pkgdirbase"
 	fi
 	mkdir -p "$pkgdirbase"
-	chmod a-srw "$pkgdirbase"
+	chmod a-rw "$pkgdirbase"
 	cd_safe "$startdir"

