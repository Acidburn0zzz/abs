OSVERSION=$(awk '/^\#define[[:blank:]]__FreeBSD_version/ {print $3}' < /usr/include/sys/param.h)

export CONFIG_SITE=/usr/share/absd/config.site

fbsd10fix() {
	comm -13 \
		<(for i in "${sources[@]}"; do
			echo "${srcdir}/${i}"
		done | sort) \
		<(find "$srcdir" -type f \
			\( -name config.rpath   \
			-o -name config.libpath \
			-o -name configure      \
			-o -name libtool.m4     \
			-o -name ltconfig       \
			-o -name libtool        \
			-o -name aclocal.m4     \
			-o -name acinclude.m4 \) \
			| sort
		) \
	| while read f; do
		sed -i.fbsd10bak \
			-e 's|freebsd1\*)|freebsd1.\*)|g' \
			-e 's|freebsd\[12\]\*)|freebsd[12].*)|g' \
			-e 's|freebsd\[123\]\*)|freebsd[123].*)|g' \
			-e 's|freebsd\[\[12\]\]\*)|freebsd[[12]].*)|g' \
			-e 's|freebsd\[\[123\]\]\*)|freebsd[[123]].*)|g' \
		"${f}"
	
		touch -f -mr "${f}.fbsd10bak" "${f}"
		rm -f "${f}.fbsd10bak"
		msg2 "FreeBSD 10 autotools fix applied to ${f}"
	done

	msg "Finish applying the FreeBSD 10 fix."
}

libtoolfix() {
	comm -13 \
		<( for i in "${sources[@]}"; do
                        echo "${srcdir}/${i}"
                done | sort) \
		<( find "$srcdir" \
			\( -name configure -or -name ltconfig \
			-type f \) \
			| sort
		) \
		| while read x; do
			sed -i.bak \
				-e '/dragonfly\*/!s/^ *freebsd\*[ )]/dragonfly* | &/' \
				-e '/gcc_dir=\\`/s/gcc /${CC} /' \
				-e '/gcc_ver=\\`/s/gcc /${CC} /' \
				-e '/link_all_deplibs[0-9A-Z_]*=/s/=unknown/=no/' \
				-e '/objformat=/s/echo aout/echo elf/'	\
				-e "/freebsd-elf\\*)/,/;;/ { /deplibs_check_method=/s/=.*/=pass_all/; }" \
				${x}
			touch -mr ${x}.bak ${x}
		done

        comm -13 \
                <( for i in "${sources[@]}"; do
                        echo "${srcdir}/${i}"
                done | sort) \
                <( find "$srcdir" \
			\( -name ltmain.sh \) \
                        | sort
                ) \
                | while read x; do 
			sed -i '' \
				-e '/if.*linkmode.*prog.*mode.*!= relink/s/if.*;/if :;/'\
				-e '/if.*linkmode.*prog.*mode.* = relink/s/||.*;/;/' \
				-e 's/|-p|-pg|/|-B*|-p|-pg|/' ${x}
		done



        comm -13 \
                <( for i in "${sources[@]}"; do
                        echo "${srcdir}/${i}"
                done | sort) \
                <( find "$srcdir" \
			\( -name configure -or -name ltconfig \) \
                        | sort
                ) \
                | while read x; do 
			sed -i.bak -e "/freebsd-elf\\*)/,/;;/ { \
				/library_names_spec=.*\\.so/ \
				s/=.*/='\$libname\$release.so\$versuffix \
				\$libname\$release.so\$major \$libname.so' \
				soname_spec='\$libname\$release.so\$major'/; \
				/library_names_spec=.*shared_ext/ \
				s/=.*/='\$libname\$release\$shared_ext\$versuffix \
				\$libname\$release\$shared_ext\$major \
				\$libname\$shared_ext' \
				soname_spec='\$libname\$release\$shared_ext\$major'/; \
				}" \
				${x}
		done

        comm -13 \
                <( for i in "${sources[@]}"; do
                        echo "${srcdir}/${i}"
                done | sort) \
                <( find "$srcdir" \
                        \( -name ltmain.sh \) \
                        | sort
                ) \
                | while read x; do
			sed -i '' -e '/case $version_type in/,+2 s/darwin|linux|/darwin|freebsd-elf|linux|/' \
				-e '/freebsd-elf)/,+2 {
				/major=/s/=.*/=.\$((\$current - \$age))/;
				/versuffix=/s/=.*/="\$major.\$age.\$revision"/; }' \
				${x}
		done



	msg "Finished fixing libtool"

}

set_compiler_clang() {
	msg "Setting compiler to clang"
	export CC=clang CXX=clang++ CPP=clang-cpp
}

set_compiler_gcc() {
	msg "Setting compiler to gcc"
	export CC=gcc CXX=g++ CPP=gcc-cpp
}

apply_patches() {
	if [ -d "${startdir}/files" ]; then
		if [[ -d "${srcdir}/${pkgname}-${pkgver}" &&  -z "${patchdir}" ]]; then
			patchdir="${pkgname}-${pkgver}"
			warning "Please set patch directory in PKGBUILD"
		fi

		if [[ -z "${patch_level}" ]];then
			patch_level="-p0"
		fi

		if [[ -z "${VERBOSE}" ]]; then
			silent_arg="--silent"
		fi

		for _patch in $(readlink -f ${startdir}/files/*); do
			msg2 "Applying found patch ${_patch}"
			if [[ -n ${silent_arg} ]];then
				patch -d "${srcdir}/${patchdir}" "${silent_arg}" "${patch_level}" -i ${_patch}
			else
				patch -d "${srcdir}/${patchdir}" "${patch_level}" -i ${_patch}
		done
	fi

}
