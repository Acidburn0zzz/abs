OSVERSION=$(awk '/^\#define[[:blank:]]__FreeBSD_version/ {print $3}' < /usr/include/sys/param.h)


export CONFIG_SITE=/usr/share/pacbsd/config.site

##
##  FreeBSD patches patch Makefiles with the variable below
##  Make sure we have them set
##
export BSD_INSTALL_PROGRAM="install  -s -m 555"
export BSD_INSTALL_LIB="install  -s -m 444"
export BSD_INSTALL_SCRIPT="install  -m 555"
export BSD_INSTALL_DATA="install  -m 0644"
export BSD_INSTALL_MAN="install  -m 444"

OSREL="$(uname -r)"

fbsd10fix() {
	comm -13 \
		<(for i in "${sources[@]}"; do
			echo "${srcdir}/${i}"
		done | sort) \
		<(find "$srcdir" -type f \
			\( -name config.rpath   \
			-o -name config.libpath \
			-o -name configure      \
			-o -name libtool.m4     \
			-o -name ltconfig       \
			-o -name libtool        \
			-o -name aclocal.m4     \
			-o -name acinclude.m4 \) \
			| sort
		) \
	| while read f; do
		sed -i.fbsd10bak \
			-e 's|freebsd1\*)|freebsd1.\*)|g' \
			-e 's|freebsd\[12\]\*)|freebsd[12].*)|g' \
			-e 's|freebsd\[123\]\*)|freebsd[123].*)|g' \
			-e 's|freebsd\[\[12\]\]\*)|freebsd[[12]].*)|g' \
			-e 's|freebsd\[\[123\]\]\*)|freebsd[[123]].*)|g' \
		"${f}"
	
		touch -f -mr "${f}.fbsd10bak" "${f}"
		rm -f "${f}.fbsd10bak"
		msg2 "FreeBSD 10 autotools fix applied to ${f}"
	done

	msg "Finish applying the FreeBSD 10 fix."
}

libtoolfix() {
	make -f /usr/share/pacbsd/libtool.mk WORKDIR="${srcdir}" &>/dev/null
	msg "Finished fixing libtool"
}

set_compiler_clang() {
	msg "Setting compiler to clang"
	export CC=clang CXX=clang++ CPP=clang-cpp
}

set_compiler_gcc() {
	msg "Setting compiler to gcc"
	export CC=gcc CXX=g++ CPP=gcc-cpp
	export LDFLAGS="-L/usr/lib/gcc -rpath=/usr/lib/gcc/ ${LDFLAGS}"
}

dos2unix() {
	find . -type f -exec dos2unix -k -s -o {} ';'
}

apply_patches() {
	if [[ ! -d "${startdir}/files" ]]; then
		return
	fi
	if [[ -z "${patchdir}" ]]; then
		if [[ ! -d "${srcdir}/${pkgname}-${pkgver}" ]]; then
			error "$(gettext "Detected patch files, but Couldn't find where to patch!")"
			exit 1
		else
			patchdir="${pkgname}-${pkgver}"
		fi
	fi
	
	patchoptions="${patchoptions:--p0}"

	for _patch in "${startdir}"/files/patch-*; do
		if [ -f "${_patch}" ]; then
			msg2 "Applying found patch ${_patch}"
			patch -d "${srcdir}/${patchdir}" ${patchoptions} -i "${_patch}"
		fi
	done

	
	for _patch in "${startdir}"/files/extra-*; do
		if [ -f "${_patch}" ]; then 
			msg2 "Applying found extra patch ${_patch}"
			patch -d "${srcdir}/${patchdir}" ${patchoptions} -i "${_patch}"
		fi
	done

}

pathfix() {
	find ${srcdir} -name "Makefile.in" -type f | xargs sed -i '' \
		-e 's|[(]libdir[)]/locale|(prefix)/share/locale|g' \
		-e 's|[(]libdir[)]/pkgconfig|(prefix)/libdata/pkgconfig|g' \
		-e 's|[(]LIBDIR[)]/pkgconfig|(PREFIX)/libdata/pkgconfig|g' \
		-e 's|[{]libdir[}]/pkgconfig|(prefix)/libdata/pkgconfig|g' \
		-e 's|[{]LIBDIR[}]/pkgconfig|(PREFIX)/libdata/pkgconfig|g' \
		-e 's|[(]datadir[)]/pkgconfig|(prefix)/libdata/pkgconfig|g' \
		-e 's|[(]prefix[)]/lib/pkgconfig|(prefix)/libdata/pkgconfig|g' \
		-e 's|[$$][(]localstatedir[)]/scrollkeeper|/var/db/rarian|g' \
		-e 's|[(]libdir[)]/bonobo/servers|(prefix)/libdata/bonobo/servers|g'
}

pathfix32() {
        find ${srcdir} -name "Makefile.in" -type f | xargs sed -i '' \
                -e 's|[(]libdir[)]/locale|(prefix)/share/locale|g' \
                -e 's|[(]libdir[)]/pkgconfig|(prefix)/libdata32/pkgconfig|g' \
                -e 's|[(]LIBDIR[)]/pkgconfig|(PREFIX)/libdata32/pkgconfig|g' \
                -e 's|[{]libdir[}]/pkgconfig|(prefix)/libdata32/pkgconfig|g' \
                -e 's|[{]LIBDIR[}]/pkgconfig|(PREFIX)/libdata32/pkgconfig|g' \
                -e 's|[(]datadir[)]/pkgconfig|(prefix)/libdata32/pkgconfig|g' \
                -e 's|[(]prefix[)]/lib/pkgconfig|(prefix)/libdata32/pkgconfig|g' \
                -e 's|[$$][(]localstatedir[)]/scrollkeeper|/var/db/rarian|g' \
                -e 's|[(]libdir[)]/bonobo/servers|(prefix)/libdata32/bonobo/servers|g'
}

iconv() {
	export ICONV_CMD="/usr/local/bin/iconv"
	export ICONV_LIB="-liconv"
	export ICONV_PREFIX="/usr/local"
	export ICONV_CONFIGURE_ARG="--with-libiconv-prefix=/usr/local"
	export ICONV_CONFIGURE_BASE="--with-libiconv=/usr/local"
	export ICONV_INCLUDE_PATH="/usr/local/include"
	export ICONV_LIB_PATH="/usr/local/lib/libiconv.so"


	cmake_iconv_args=(-DICONV_INCLUDE_DIR=${ICONV_INCLUDE_PATH} \
		-DICONV_LIBRARIES=${ICONV_LIB_PATH} \
		-DICONV_LIBRARY=${ICONV_LIB_PATH} \
		-DLIBICONV_INCLUDE_DIR=${ICONV_INCLUDE_PATH} \
		-DLIBICONV_LIBRARIES=${ICONV_LIB_PATH} \
		-DLIBICONV_LIBRARY=${ICONV_LIB_PATH})


}

iconv32() {
        export ICONV_CMD="/usr/local/bin/iconv-32"
        export ICONV_LIB="-liconv"
        export ICONV_PREFIX="/usr/local"
        export ICONV_CONFIGURE_ARG="--with-libiconv-prefix=/usr/local"
        export ICONV_CONFIGURE_BASE="--with-libiconv=/usr/local"
        export ICONV_INCLUDE_PATH="/usr/local/include"
        export ICONV_LIB_PATH="/usr/local/lib32/libiconv.so"


        cmake_iconv_args=(-DICONV_INCLUDE_DIR=${ICONV_INCLUDE_PATH} \
                -DICONV_LIBRARIES=${ICONV_LIB_PATH} \
                -DICONV_LIBRARY=${ICONV_LIB_PATH} \
                -DLIBICONV_INCLUDE_DIR=${ICONV_INCLUDE_PATH} \
                -DLIBICONV_LIBRARIES=${ICONV_LIB_PATH} \
                -DLIBICONV_LIBRARY=${ICONV_LIB_PATH})


}

gnu_configure() {
	CONFIG_GUESS_DIRS=($(find ${srcdir} -name config.guess | xargs -n 1 /usr/bin/dirname | xargs -r0 printf "%s\n"))
	CONFIG_SUB_DIRS=($(find ${srcdir} -name config.sub | xargs -n 1 /usr/bin/dirname | xargs -r0 printf "%s\n"))
        for _D in "${CONFIG_GUESS_DIRS[@]}"; do
                rm "${_D}/config.guess"
		msg "Copying /usr/share/pacbsd/config.guess to ${_D}/config.guess"
                cp /usr/share/pacbsd/config.guess "${_D}/config.guess"
                chmod a+rx "${_D}/config.guess"
	done

	for _D in "${CONFIG_SUB_DIRS[@]}"; do
                rm "${_D}/config.sub"
		msg "Copying /usr/share/pacbsd/config.sub to ${_D}/config.sub"
                cp /usr/share/pacbsd/config.sub "${_D}/config.sub"
                chmod a+rx "${_D}/config.sub"
        done
}
