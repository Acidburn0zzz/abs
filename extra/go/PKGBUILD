# Maintainer: Adam Jimerson <vendion@pacbsd.org>
# Port: lang/go

pkgname=('go' 'go-tools')
pkgver=1.6.3
pkgrel=2
arch=('i386' 'amd64')
url='http://golang.org/'
license=('BSD')
if [[ "${CARCH}" == 'i386' ]]; then
  makedepends=('git' 'compat6x') # There is no go pkg for i386 yet...
else
  makedepends=('git' 'go' 'compat6x')
fi
options=('!strip' 'staticlibs')
source=("https://storage.googleapis.com/golang/${pkgname}${pkgver}.src.tar.gz")
_gourl=golang.org/x/tools/cmd
sha256sums=('6326aeed5f86cf18f16d6dc831405614f855e2d416a91fd3fdc334f772345b00')

prepare() {
  export GOROOT_BOOTSTRAP="/usr/lib/go"
  # FreeBSD i386 is new in Go 1.6 so it must be bootstrapped initially
  if [[ "${CARCH}" == 'i386' ]]; then
    export GOROOT_BOOTSTRAP="/tmp/go"
    export PATH="/tmp/go/bin:$PATH"
    curl -O "https://storage.googleapis.com/golang/go1.6.freebsd-386.tar.gz"
    sha256 -c '67f0278e0650b303156adbfe012317b9ce75396e3a28cbc0a8210284bb07ab85' \
      'go1.6.freebsd-386.tar.gz'
    tar -C /tmp -zxvf go1.6.freebsd-386.tar.gz
  fi
}

build() {
  cd "$srcdir/$pkgname/src"

  export GOROOT="$srcdir/$pkgname"
  export GOBIN="$GOROOT/bin"
  export GOPATH="$srcdir/"
  export GOROOT_FINAL="/usr/lib/go"
  export GOROOT_BOOTSTRAP="/usr/lib/go"

  # Crosscompilation for various platforms, and their supported arcutectures.
  # This is not required as the compiler can generate libraries on the fly.
  # Prebuilding the libs speeds up crosscompilation time.
  #
  # for os in 'darwin' 'linux' 'windows'; do
  #   case "${os}" in
  #     'darwin')
  #       export GOOS="${os}"
  #       export GOARCH='amd64'
  #       bash make.bash --no-clean
  #       ;;
  #     'linux')
  #       export GOOS="${os}"
  #       for arch in 'amd64' '386' 'arm'; do
  #         export GOARCH="${arch}"
  #         bash make.bash --no-clean
  #       done
  #       ;;
  #     'windows')
  #       export GOOS="${os}"
  #       for arch in 'amd64' '386'; do
  #         export GOARCH="${arch}"
  #         bash make.bash --no-clean
  #       done
  #       ;;
  #   esac
  # done

  # Crosscompile resets
  GOOS='freebsd'
  case "${CARCH}" in
    'i386' ) export GOARCH=386 ;;
    'amd64' ) export GOARCH=amd64 ;;
  esac

  bash make.bash --no-clean

  # System-wide tools
  for tool in 'godex' 'godoc' 'goimports' 'gomvpkg' 'gorename' 'gotype'; do
    ${GOROOT}/bin/go get -d "golang.org/x/tools/cmd/${tool}"
    ${GOROOT}/bin/go build -v -x -o "${GOPATH}/bin/${tool}" "${_gourl}/${tool}"
  done

  # Distribution tools
  for tool in 'benchcmp' 'bundle' 'callgraph' 'digraph' 'eg' \
    'html2article' 'guru' 'oracle' 'present' 'ssadump' 'stress' 'stringer'; do
    ${GOROOT}/bin/go get -d "golang.org/x/tools/cmd/${tool}"
    ${GOROOT}/bin/go build -v -x -o "${GOPATH}/pkg/tool/${GOOS}_${GOARCH}/${tool}" "golang.org/x/tools/cmd/${tool}"
  done
}

check() {
  cd "$pkgname"

  export GOOS='freebsd'
  case "${CARCH}" in
    'amd64' ) GOARCH=amd64 ;;
    'i386' ) GOARCH=386 ;;
  esac

  export GOROOT="$srcdir/$pkgname"
  export GOBIN="$GOROOT/bin"
  export PATH="${srcdir}/${pkgname}-${pkgver}/bin:${PATH}"

  # bundle does not compile with 1.6
  # godoc test fails with 1.6
  # stringer test fails with 1.6.3
  for tool in 'goimports' 'gomvpkg' 'gorename' 'gotype' 'benchcmp' \
    'callgraph' 'digraph' 'eg' 'html2article' 'guru' 'oracle' 'present' \
    'ssadump' 'stress'; do
    GOPATH="${srcdir}" ${GOROOT}/bin/go test -v -x ${_gourl}/${tool}
  done

  # TestSimpleMulticastListener will fail in standard chroot.
  cd src && bash run.bash --no-rebuild || true
}

package_go() {
  pkgdesc='Compiler and tools for the Go programming language from Google'
  optdepends=('git: for fetching sources from git repositories'
              'bzr: for fetching sources from bazzar repositories'
              'subversion: for fetching sources from subversion repositories'
              'mercurial: for fetching sources from mercurial repositories'
              'compat6x:  for testdata')
  install="${pkgname}.install"

  cd "${srcdir}/${pkgname}"

  export GOROOT="${srcdir}/${pkgname}"
  export GOBIN="${GOROOT}/bin"
  export PATH="${srcdir}/${pkgname}/bin:${PATH}"
  export GOOS='freebsd'
  # export GOROOT_BOOTSTRAP='/usr/lib/go'
  case "${CARCH}" in
    'amd64' ) export GOARCH=amd64 ;;
    'i386' ) export GOARCH=386 ;;
  esac

  install -dm644 "${pkgdir}/usr/share/licenses/${pkgname}"
  install -Dm644 'LICENSE' "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"

  mkdir -p "${pkgdir}/usr/"{share/go,lib/go,lib/go/pkg,lib/go/src,lib/go/site/src}

  cp -r 'doc' "${pkgdir}/usr/share/go"
  cp -r 'misc' "${pkgdir}/usr/share/go"
  ln -s '/usr/share/go/doc' "${pkgdir}/usr/lib/go/doc"
  cp -r 'bin' "${pkgdir}/usr"
  cp -r 'pkg/'{include,freebsd_${GOARCH},tool} "${pkgdir}/usr/lib/go/pkg"
  # The 'race' folder is not always generated for all architectures.
  [ -d "pkg/freebsd_${GOARCH}_race"  ] && cp -r "pkg/freebsd_${GOARCH}_race" "${pkgdir}/usr/lib/go/pkg"
  cp -r "${GOROOT}/src" "${pkgdir}/usr/lib/go/"
  cp -r "${GOROOT}/lib" "${pkgdir}/usr/lib/go/"

  # This is to make `# go get golang.org/x/tour/gotour` and then running the
  # gotour executable work out of the box.
  ln -sf /usr/bin "${pkgdir}/usr/lib/go/bin"

  install -Dm644 VERSION "${pkgdir}/usr/lib/go/VERSION"

  # For godoc
  install -Dm644 favicon.ico "${pkgdir}/usr/lib/go/favicon.ico"

  # Clean Windows specific files.
  rm -fv "${pkgdir}"/usr/lib/go/src/*.bat

  # Strip manually since `strip` will not process Go's static
  # libraries.
  for i in "${pkgdir}/usr/bin"/* \
            "${pkgdir}/usr/lib/go/pkg/tool/freebsd_${GOARCH}"/*; do
    strip -s "${i}"
  done
}

package_go-tools() {
  pkgdesc='Extra developer tools for the Go programming language'
  depends=("go=${pkgver}-1")

  export GOOS='freebsd'
  case "${CARCH}" in
    'amd64' ) export GOARCH=amd64 ;;
    'i386' ) export GOARCH=386 ;;
  esac

  install -dm644 "${pkgdir}/usr/share/licenses/${pkgname}"
  install -Dm644 "${srcdir}/src/${_gourl}/../LICENSE" "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"

  # System-wide tools
  install -dm755 "${pkgdir}/usr/bin"
  install -p -m755 "${srcdir}/bin"/* "${pkgdir}/usr/bin"

  # Distribution tools
  install -dm755 "${pkgdir}/usr/lib/go/pkg/tool/${GOOS}_${GOARCH}"
  install -p -m755 "${srcdir}/pkg/tool/${GOOS}_${GOARCH}"/* "${pkgdir}/usr/lib/go/pkg/tool/${GOOS}_${GOARCH}"

  for i in "${pkgdir}/usr/bin"/* \
           "${pkgdir}/usr/lib/go/pkg/tool/freebsd_${GOARCH}"/*; do
    strip -s "${i}"
  done
}

# vim:set ts=2 sw=2 et:
