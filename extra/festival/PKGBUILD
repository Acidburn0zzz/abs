# $Id: PKGBUILD 205607 2014-02-09 10:29:39Z andyrtr $
# Maintainer:
# Contributor: Andrea Scarpino <andrea@archlinux.org>
# Contributor: Simo Leone <neotuli@gmail.com>

pkgname=festival
pkgver=2.1
pkgrel=1
pkgdesc="A general multi-lingual speech synthesis system"
arch=('i686' 'x86_64')
url="http://www.cstr.ed.ac.uk/projects/festival/"
license=('BSD' 'GPL' 'custom')
depends=('perl')
options=('!makeflags')
netbsd_patches=(
  festival_el_utf8.diff
  hts21compat.diff
  languagespatch.diff
  lintianspellpatch.diff
  src_modules_UniSyn_diphone_UniSyn_diphone.cc.diff
  src_modules_diphone_di_io.cc.diff
  src_modules_diphone_diphone.cc.diff
  src_modules_diphone_diphone.h.diff
  src_modules_donovan_t2s.h.diff
  patch-speech__tools_base__class_EST__TVector.cc
  patch-speech__tools_base__class_inst__tmpl_vector__dmatrix__t.cc
  patch-speech__tools_base__class_inst__tmpl_vector__dvector__t.cc
  patch-speech__tools_base__class_inst__tmpl_vector__fmatrix__t.cc
  patch-speech__tools_config_compilers_gcc__defaults.mak
  patch-speech__tools_include_EST__Ngrammar.h
  patch-speech__tools_include_EST__SCFG.h
  patch-speech__tools_include_EST__String.h
  patch-speech__tools_include_EST__error.h
  patch-speech__tools_include_ling__class_EST__FeatureFunctionPackage.h
  patch-speech__tools_include_unix_EST__socket__unix.h
  patch-speech__tools_stats_dynamic__program.cc
  patch-speech__tools_utils_EST__ServiceTable.cc
  patch-speech_tools_install.mak
)
port_patches=(
	patch-ae
	patch-ag
	patch-ah
	patch-ap
	patch-debian-bug-667377
	patch-long-over-float
	patch-voxware
)

source=(http://www.cstr.ed.ac.uk/downloads/${pkgname}/${pkgver}/${pkgname}-${pkgver}-release.tar.gz
        http://www.cstr.ed.ac.uk/downloads/${pkgname}/${pkgver}/speech_tools-${pkgver}-release.tar.gz
        http://www.cstr.ed.ac.uk/downloads/${pkgname}/${pkgver}/festlex_CMU.tar.gz
        http://www.cstr.ed.ac.uk/downloads/${pkgname}/${pkgver}/festlex_OALD.tar.gz
        http://www.cstr.ed.ac.uk/downloads/${pkgname}/${pkgver}/festlex_POSLEX.tar.gz
        speechconfig.patch
        festconfig.patch
        ${netbsd_patches[@]}
        ${port_patches[@]})
md5sums=('c93eb3e389ed171ab9abd46afe8897a8'
         '6920ddc75b042910a3bcfee3ab106938'
         '6a2ee4fed7c3ebedf197a3b8524ccb87'
         '84af32a914d996f57bc4cb36fe8cdc97'
         'aa80f9250065b318325f16fdad3a4484'
         '369303a23ca7fa4c18c6acf8cb89b76d'
         'eb94f4740db649b6042c591ed5820007'
         'fb8d2d50600fdec08099967ccbd5b54f'
         '40cbc225bfb7deec2458ac931c0f19e1'
         'bbd8d45efa9626e4c957c3f9741bdc2f'
         '907b7bbac4fbf43e3db57b9fdf4aab75'
         '6c981069e3dc43f2a26b91d691ae9543'
         'f434413820a4679936f3873a161d075d'
         '3fc92a02a7d23926ed56ebb2c3e97fea'
         '909a46191e697d13382ff987b19801d7'
         '94a14af0520ab23218e11702666c34bc'
         'c6b1fc5115d37ded4485dd60d4fe88a2'
         'deb57080ff30a8ff7c17c1fd460f0013'
         'b9ad964d8f7edc7b625750a408eedd0d'
         'c85619bb0f46c52cec21dfec88288ae3'
         'bf373a5001287be62efc937f2e2dcb4c'
         '9cfd8db736d9dbc8da0783eb84355677'
         'b5312534b2e72fffab94523b4be6faa9'
         'cae36ab16f66d5e60f56b667f92db3f9'
         '16620f3196acc1b9cb3b5caaec6d6245'
         '3168c25c95361c6a189657ff65a9a117'
         'b551836e1fe2a3557df5151848dfd523'
         'f3fa1ff70cb66734caf117dd17c1767b'
         '2aff645b3b807e82d65c447b9560ee8e'
         '2e91ff171765382e8410c9e2c5309338'
         'b24e7e2e00f4c9fcc69b871e46f6aebd'
         'ad272fced01b5cc4fdc661f771d3c8d0'
         'a08173f99885ef15f4b8a271879c70fe'
         'f21c31763185e53627ac81f3a146eb3d'
         'f36d414b70dd970093c26441f90a459a'
         '74261237a8488ea9d88da1bf486148ca'
         '81283c7111778c18eee04b5a02eff2ac')

prepare() {
  cd $srcdir

	for i in ${port_patches[@]}; do
		msg "Applying patch ${i}"
		patch -p0 -i "${srcdir}/"${i}
	done

	msg "Applying ArchLinux patches"
  patch -Np0 -i ${srcdir}/speechconfig.patch
  patch -Np0 -i ${srcdir}/festconfig.patch

  # Avoid make failure on making scripts and docs
  gsed -i "s#examples bin doc#examples#" festival/Makefile

	cd ${srcdir}/festival
  for i in ${netbsd_patches[@]}; do
    msg "Applying patch ${i}"
    patch -p0 -i "${srcdir}/"${i}
  done

	ln -s ${srcdir}/speech_tools/config/systems/ix86_FreeBSD.mak ${srcdir}/speech_tools/config/systems/${CARCH}_unknown.mak

	sed -i '' -E -e 's,^(CC|CXX) *=,\1 ?=,' \
	    -e 's,^(CFLAGS|CXXFLAGS) *=,\1 +=,' \
	    -e 's,^OPTIMI,#OPTIMI,' \
	    ${srcdir}/speech_tools/config/compilers/gcc*.mak

	test -e ${srcdir}/speech_tools/config/compilers/${CC}.mak ||	\
		ln -s gcc_defaults.mak ${srcdir}/speech_tools/config/compilers/${CC}.mak

	find ${srcdir}/{speech_tools,festival} -name "Makefile.in" | xargs sed -i '' -e 's|^LIBTOOL[ ]*=.*|LIBTOOL=/usr/bin/libtool|g'

}

build() {
  # Build Speech Tools first
  cd "$srcdir/speech_tools"
  ./configure --prefix=/usr --sysconfdir=/etc
  gmake OPTIMISE_CXXFLAGS="${CXXFLAGS} -fno-strict-aliasing" OPTIMISE_CCFLAGS="${CFLAGS} -fno-strict-aliasing" CC="${CC}" CXX="${CXX}"


  # Build Festival itself
  cd "$srcdir/festival"
  ./configure --prefix=/usr --sysconfdir=/etc
  gmake OPTIMISE_CXXFLAGS="${CXXFLAGS}" OPTIMISE_CCFLAGS="${CFLAGS}" CC="${CC}" CXX="${CXX}"
}

package() {
  # Install Speech Tools first
  cd "$srcdir/speech_tools"
  install -dm755 "$pkgdir"/usr/{bin,lib,include/speech_tools/{,instantiate,ling_class,rxp,sigpr,unix}}

  #binaries
  #move binaries over wrappers (FS#7864)
  for i in $(grep -l 'EST shared script' bin/*); do
    cp -f main/$(basename $i) bin;
  done
  install -m755 -t "$pkgdir"/usr/bin bin/[a-z]*
  rm -f "$pkgdir"/usr/bin/{est_gdb,est_examples,est_program}

  #libraries
  install -m755 -t "$pkgdir"/usr/lib lib/lib*.so.*
  ln -sf libestbase.so.${pkgver}.1 "$pkgdir"/usr/lib/libestbase.so
  ln -sf libestools.so.${pkgver}.1 "$pkgdir"/usr/lib/libestools.so
  ln -sf libeststring.so.1.2 "$pkgdir"/usr/lib/libeststring.so

  #headers
  for dir in {.,instantiate,ling_class,rxp,sigpr,unix}; do
    install -m644 -t "${pkgdir}"/usr/include/speech_tools/$dir include/$dir/*.h
  done

  # Install Festival itself
  cd "$srcdir"/festival

  #binaries
  install -m755 src/main/festival "$pkgdir"/usr/bin/
  install -m755 src/main/festival_client "$pkgdir"/usr/bin/
  install -m755 examples/benchmark "$pkgdir"/usr/bin/
  install -m755 examples/dumpfeats "$pkgdir"/usr/bin/
  install -m755 examples/durmeanstd "$pkgdir"/usr/bin/
  install -m755 examples/latest "$pkgdir"/usr/bin/
  install -m755 examples/make_utts "$pkgdir"/usr/bin/
  install -m755 examples/powmeanstd "$pkgdir"/usr/bin/
  install -m755 examples/run-festival-script "$pkgdir"/usr/bin/
  install -m755 examples/saytime "$pkgdir"/usr/bin/
  install -m755 examples/scfg_parse_text "$pkgdir"/usr/bin/
  install -m755 examples/text2pos "$pkgdir"/usr/bin/
  install -m755 examples/text2wave "$pkgdir"/usr/bin

  #libraries
  install -m755 src/lib/libFestival.so.* "$pkgdir"/usr/lib/
  ln -sf libFestival.so.2.1.0 "$pkgdir"/usr/lib/libFestival.so

  #headers
  install -dm755 "$pkgdir"/usr/include/festival
  install -m644 -t "$pkgdir"/usr/include/festival src/include/*.h

  mkdir -p "$pkgdir"/usr/share/festival
  cp -aR lib/* "$pkgdir"/usr/share/festival
  rm -fv $(find "$pkgdir"/usr/share/festival -name Makefile)
  rm -fv $(find "$pkgdir"/usr/bin -name Makefile)

  #create voices directory
  install -dm755 "$pkgdir"/usr/share/festival/voices

  #licenses
  install -D -m644 "$srcdir"/festival/COPYING \
    "$pkgdir"/usr/share/licenses/$pkgname/LICENSE
  install -D -m644 "$srcdir"/speech_tools/README \
    "$pkgdir"/usr/share/licenses/$pkgname/LICENSE.other

  # Ok now some general cleanups
  for i in $(find "$pkgdir"/usr/include/ -type f); do
    sed -i -e 's,"EST.*\.h",\<speech_tools/&\>,g' -e 's,speech_tools/\",speech_tools/,g' \
      -e 's,"siod.*\.h",\<speech_tools/&\>,g' -e 's,speech_tools/\",speech_tools/,g' \
      -e 's,"instantiate/.*\.h",\<speech_tools/&\>,g' -e 's,speech_tools/instantiate/\",speech_tools/instantiate/,g' -e 's,"instantiate,instantiate,g' \
      -e 's,"ling_class/.*\.h",\<speech_tools/&\>,g' -e 's,speech_tools/ling_class/\",speech_tools/ling_class/,g' -e 's,"ling_class,ling_class,g' \
      -e 's,"rxp/.*\.h",\<speech_tools/&\>,g' -e 's,speech_tools/rxp/\",speech_tools/rxp/,g' -e 's,"rxp,rxp,g' \
      -e 's,"sigpr/.*\.h",\<speech_tools/&\>,g' -e 's,speech_tools/sigpr/\",speech_tools/sigpr/,g' -e 's,"sigpr,sigpr,g' \
      -e 's,"unix/.*\.h",\<speech_tools/&\>,g' -e 's,speech_tools/unix/\",speech_tools/unix/,g' -e 's,\.h\">,.h\>,g' -e 's,"unix,unix,g' \
      -e 's,"festival\.h",\<festival/festival.h\>,g' \
      -e 's,"ModuleDescription\.h",\<festival/ModuleDescription.h\>,g' \
      -e 's,"Phone\.h",\<festival/Phone.h\>,g' $i
  done
}
